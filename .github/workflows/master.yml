on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

name: master
jobs:
  dotnet_linux:
    name: '.NET (Linux)'
    container:
      image: ubuntu:16.04
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/linux

    - name: Clone ImageMagick libraries
      run: ./checkout.sh linux
      working-directory: src/ImageMagick

    - name: Build libraries
      run: ../../../build/linux/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/linux/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/linux/build.Native.sh
      working-directory: src/Magick.Native

    - name: Copy Native
      run: ../../build/linux/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload libraries
      uses: actions/upload-artifact@v1
      with:
        name: linux
        path: artifacts

  dotnet_macos:
    name: '.NET (MacOS)'
    runs-on: macos-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/macos

    - name: Clone ImageMagick libraries
      run: ./checkout.sh macos
      working-directory: src/ImageMagick

    - name: Build libraries
      run: ../../../build/macos/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/macos/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/macos/build.Native.sh
      working-directory: src/Magick.Native

    - name: Copy Native
      run: ../../build/macos/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload libraries
      uses: actions/upload-artifact@v1
      with:
        name: macos
        path: artifacts

  dotnet_windows:
    name: '.NET (Windows)'
    runs-on: windows-latest

    strategy:
      matrix:
        quantumName: [Q8, Q8-OpenMP, Q16, Q16-OpenMP, Q16-HDRI, Q16-HDRI-OpenMP]
        platformName: [x86, x64]
        exclude:
        - quantumName: Q8-OpenMP
          platformName: x86
        - quantumName: Q16-OpenMP
          platformName: x86
        - quantumName: Q16-HDRI-OpenMP
          platformName: x86

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Clone ImageMagick libraries
      run: ./checkout.cmd
      working-directory: src/ImageMagick

    - name: Build ImageMagick
      run: ./build.ImageMagick.cmd ${{ matrix.quantumName }} ${{ matrix.platformName }}
      working-directory: build/windows

    - name: Update resource files
      run: ./update.resourcefiles.ps1
      working-directory: build/windows

    - name: Build Native
      run: ./build.Native.cmd ${{ matrix.quantumName }} ${{ matrix.platformName }}
      working-directory: build/windows

    - name: Copy Native
      run: ./copy.Native.ps1 -quantumName ${{ matrix.quantumName }} -platformName ${{ matrix.platformName }} -destination ../../artifacts
      working-directory: build/windows

    - name: Sign libraries
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{ secrets.IMAGEMAGICK_CERTIFICATE }}'
        folder: 'artifacts\Release${{ matrix.quantumName }}\${{ matrix.platformName }}'

    - name: Upload libraries
      uses: actions/upload-artifact@v1
      with:
        name: windows
        path: artifacts

  dotnet_metadata:
    name: '.NET (Metadata)'
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Clone ImageMagick libraries
      run: ./checkout.cmd
      working-directory: src/ImageMagick

    - name: Create metadata
      run: ./create.metadata.ps1 -destination ../../artifacts
      working-directory: build/metadata

    - name: Upload metadata
      uses: actions/upload-artifact@v1
      with:
        name: metadata
        path: artifacts

  dotnet_verify_linux:
    name: '.NET (Verify Linux)'
    needs:
      - dotnet_linux
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image: ['ubuntu:16.04', 'ubuntu:16.10', 'ubuntu:18.04', 'ubuntu:latest', 'centos:7', 'microsoft/dotnet:2.0-runtime', 'microsoft/dotnet:latest']

    container:
      image: ${{ matrix.image }} 

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Download linux libraries
      uses: actions/download-artifact@v2
      with:
        name: linux

    - name: Verify Native
      run: build/dotnet/linux/verify.Native.sh .

  wasm_linux:
    name: 'WASM (Linux)'
    container:
      image: trzeci/emscripten:1.39.18-upstream
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/wasm

    - name: Clone ImageMagick libraries
      run: ./checkout.sh linux
      working-directory: src/ImageMagick

    - name: Apply patches
      run: ../../../build/wasm/patches/install.patches.sh
      working-directory: src/ImageMagick/libraries

    - name: Build libraries
      run: ../../../build/wasm/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/wasm/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/wasm/build.Native.sh
      working-directory: src/Magick.Native

    - name: Create type definition
      run: npm install && npm run publish
      working-directory: src/create-type-definition

    - name: Copy Native
      run: ../../build/wasm/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload libraries
      uses: actions/upload-artifact@v1
      with:
        name: wasm
        path: artifacts

  publish_dotnet:
    name: 'Publish .NET libraries'
    needs:
      - dotnet_verify_linux
      - dotnet_macos
      - dotnet_windows
      - dotnet_metadata
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Download linux libraries
      uses: actions/download-artifact@v1
      with:
        name: linux
        path: publish\dotnet\files\linux

    - name: Download macos libraries
      uses: actions/download-artifact@v1
      with:
        name: macos
        path: publish\dotnet\files\macos

    - name: Download windows libraries
      uses: actions/download-artifact@v1
      with:
        name: windows
        path: publish\dotnet\files\windows

    - name: Download metadata
      uses: actions/download-artifact@v1
      with:
        name: metadata
        path: publish\dotnet\files\metadata

    - name: Create NuGet package
      run: ./publish.ps1 -destination ../../artifacts
      working-directory: publish/dotnet

    - name: Upload NuGet package
      uses: actions/upload-artifact@v1
      with:
        name: nuget-package
        path: artifacts

  publish_wasm:
    name: 'Publish WASM libraries'
    needs:
      - wasm_linux
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Download wasm libraries
      uses: actions/download-artifact@v1
      with:
        name: wasm
        path: publish\wasm\files

    - name: Create NPM package
      run: ./publish.ps1 -destination artifacts
      working-directory: publish/wasm

    - name: Upload NPM package
      uses: actions/upload-artifact@v1
      with:
        name: wasm-package
        path: artifacts
